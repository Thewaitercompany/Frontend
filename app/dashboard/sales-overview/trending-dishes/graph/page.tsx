"use client";
import React, { useState, useEffect } from "react";

import { useOrders } from "@/hooks/useOrders";
import Calendar from "react-calendar";
import "react-calendar/dist/Calendar.css";
import CustomCalendar from "@/components/CustomCalendar";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faBell } from "@fortawesome/free-solid-svg-icons";
import "@fortawesome/fontawesome-free/css/all.min.css";
import { useRouter } from "next/navigation";
import { Search } from "lucide-react";

import {
  AreaChart,
  Area,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
  BarChart,
  Bar,
  LabelList,
  Label
} from "recharts";
import Link from "next/link";
import Image from "next/image";

// Bell icon from Nitanshu fix
const BellIcon: React.FC<{ unreadCount?: number }> = ({ unreadCount = 0 }) => (
  <svg
    width={36}
    height={33}
    viewBox="0 0 36 33"
    fill="none"
    style={{ position: "relative", display: "block" }}
  >
    <ellipse cx="18" cy="5" rx="5.5" ry="3.2" fill="#3A2102" />
    <path
      d="M28 18V13C28 8.477 23.523 4 18 4C12.477 4 8 8.477 8 13V18L5 23V24.5H31V23L28 18Z"
      stroke="#3A2102"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
      fill="#3A2102"
    />
    <circle cx="18" cy="29" r="2.7" fill="#3A2102" />
    {unreadCount > 0 && (
      <g>
        <circle
          cx="30.5"
          cy="7.5"
          r="7"
          fill="#d82c2c"
          stroke="#fff"
          strokeWidth="2"
        />
        <text
          x="30.5"
          y="7.5"
          textAnchor="middle"
          alignmentBaseline="middle"
          dominantBaseline="middle"
          fontWeight="bold"
          fontSize="12"
          fill="#fff"
          style={{ fontVariantNumeric: "tabular-nums" }}
        >
          {unreadCount}
        </text>
      </g>
    )}
  </svg>
);

// Monthly revenue data
const pieData = [
    {
      name: "Chicken Nuggets",
      value: 50,
      unitSold: 50,
      price: 80,
      revenue: 50 * 80,
      category: "Starters",
      color: "#4F9EFF",
      image: "https://via.placeholder.com/69x53.png?text=Nuggets",
      isVeg: false,
    },
    {
      name: "Cold Coffee",
      value: 25,
      unitSold: 25,
      price: 60,
      revenue: 25 * 60,
      category: "Drinks",
      color: "#FF9E9E",
      image: "https://via.placeholder.com/69x53.png?text=Coffee",
      isVeg: true,
    },
    {
      name: "Pasta",
      value: 15,
      unitSold: 15,
      price: 100,
      revenue: 15 * 100,
      category: "Main Course",
      color: "#CEB5FF",
      image: "https://via.placeholder.com/69x53.png?text=Pasta",
      isVeg: true,
    },
    {
      name: "Ginger Tea",
      value: 7,
      unitSold: 7,
      price: 20,
      revenue: 7 * 20,
      category: "Drinks",
      color: "#C99E5A",
      image: "https://via.placeholder.com/69x53.png?text=Tea",
      isVeg: true,
    },
    {
      name: "Paneer Sandwich",
      value: 3,
      unitSold: 3,
      price: 90,
      revenue: 3 * 90,
      category: "Starters",
      color: "#A0826C",
      image: "https://via.placeholder.com/69x53.png?text=Sandwich",
      isVeg: true,
    },
  ];


const backgroundColor = "#F5EFE3";

export default function Graph() {
  const [currentTime, setCurrentTime] = useState<Date>(new Date());
  const [showNotifications, setShowNotifications] = useState(false);
  const [unreadNotificationsCount, setUnreadNotificationsCount] = useState(3);
  const [searchTerm, setSearchTerm] = useState('');
const [hourlyData, setHourlyData] = useState([]);

const generateHourlySlabs = (dishName, totalUnits) => {
  const slabs = [];
  let startHour = 10; // Start from 10 AM
  let unitsLeft = totalUnits;

  while (unitsLeft > 0) {
    const sold = Math.min(unitsLeft, Math.floor(Math.random() * 6) + 1); // 1â€“6 units
    const endHour = (startHour + 1) % 24;

    const formatHour = (h) => {
      const suffix = h >= 12 ? "pm" : "am";
      const hour12 = h % 12 === 0 ? 12 : h % 12;
      return `${hour12}${suffix}`;
    };

    slabs.push({
      hour: `${formatHour(startHour)}-${formatHour(endHour)}`,
      sold,
    });

    unitsLeft -= sold;
    startHour = endHour;
  }

  return slabs;
};




  const router = useRouter();

  const { totalOrderCount, pendingOrderCount } = useOrders();

  const baseRGB = '179, 151, 147';

  useEffect(() => {
    const timer = setInterval(() => setCurrentTime(new Date()), 1000);
    return () => clearInterval(timer);
  }, []);

  const handleUnreadCount = (count: number) =>
    setUnreadNotificationsCount(count);

  function formatDateTime(date: Date): string {
    const days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
    const months = [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec",
    ];
    let h = date.getHours();
    const m = date.getMinutes();
    let ampm = "AM";
    if (h >= 12) {
      ampm = "PM";
      if (h > 12) h -= 12;
    }
    if (h === 0) h = 12;
    return (
      days[date.getDay()] +
      " " +
      ("0" + date.getDate()).slice(-2) +
      " " +
      months[date.getMonth()] +
      " " +
      ("0" + h).slice(-2) +
      ":" +
      ("0" + m).slice(-2) +
      ampm
    );
  }

  return (
    <div
      style={{
        minHeight: "100vh",
        background: backgroundColor,
        fontFamily: "Aleo",
        position: "relative",
        overflow: "hidden",
      }}
    >
      {/* Main Dashboard Content */}
      <div className="flex justify-between items-center ml-[100px] mt-[28px]">

            <div className="flex items-center gap-2 text-[#4b2e2e]">
              <button
                onClick={() => router.push("/dashboard/sales-overview/trending-dishes")}
                className="w-[25px] h-[25px]"
                title="Back to Dashboard"
              >
                <svg
                  width="25"
                  height="25"
                  viewBox="0 0 25 25"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <rect width="25" height="25" fill="#F1EEE6" />
                  <path
                    d="M17.2783 23.75C17.0882 23.75 16.8994 23.7101 16.7227 23.6318C16.5457 23.5534 16.3833 23.4378 16.2461 23.291L7.68848 14.1318V14.1309C7.55062 13.9845 7.43978 13.8093 7.36426 13.6152C7.28884 13.4214 7.25005 13.2128 7.25 13.002C7.25 12.7909 7.28875 12.5817 7.36426 12.3877C7.42088 12.2422 7.49717 12.1073 7.58984 11.9873L7.68848 11.8721L16.2461 2.71289L16.2471 2.71191C16.3838 2.56437 16.5457 2.44803 16.7227 2.36914C16.8993 2.29042 17.0881 2.25004 17.2783 2.25C17.4688 2.25 17.6581 2.29029 17.835 2.36914C18.0119 2.44803 18.1738 2.56436 18.3105 2.71191L18.3115 2.71289L18.4102 2.82812C18.5028 2.94817 18.5791 3.08303 18.6357 3.22852C18.7113 3.42255 18.75 3.63167 18.75 3.84277C18.75 4.05366 18.7112 4.2622 18.6357 4.45605C18.5791 4.60147 18.5028 4.73645 18.4102 4.85645L18.3115 4.97168L10.9521 12.8311L10.792 13.002L10.9521 13.1729L18.3115 21.0312H18.3125C18.5894 21.3281 18.7471 21.7348 18.7471 22.1611C18.747 22.372 18.7079 22.5805 18.6328 22.7744C18.5577 22.9684 18.4487 23.1442 18.3115 23.291C18.0346 23.5874 17.6621 23.75 17.2783 23.75Z"
                    fill="#4A3936"
                    stroke="#EFECE4"
                    strokeWidth="0.5"
                  />
                </svg>
              </button>

              <h2 className="text-xl font-medium font-black">Trending Dishes</h2>
            </div>
            
          </div>
      <div className="min-h-screen bg-[#F4F0E8] px-12 ml-14">
        
        {/* Top Section - Overview + Trending */}

        {/* Bottom Section - Revenue Chart Full Width */}
        <div className="mt-4">
            <div className="bg-white rounded-xl shadow p-4 w-full overflow-x-auto">
              <div className="flex items-center justify-between mb-3">
                {/* Left: Search */}
      <div className="w-[30%] flex items-center gap-2">
  {/* Search Box */}
  <div className="flex items-center border border-[#b3978b] rounded-[6px] px-3 py-0.5 bg-white w-full">
    <Search className="text-[#b3978b] w-6 h-6 mr-2" />
    <input
      type="text"
      placeholder="Search"
      value={searchTerm}
      onChange={(e) => setSearchTerm(e.target.value)}
      className="w-full text-lg placeholder-[#b3978b] text-[#b3978b] bg-transparent focus:outline-none"
    />
  </div>

  {/* SVG Button (acts as Search trigger) */}
  <div
    className="shrink-0 cursor-pointer"
    onClick={() => {
      const item = pieData.find((d) =>
        d.name.toLowerCase() === searchTerm.toLowerCase()
      );
      if (item) {
        const hourly = generateHourlySlabs(item.name, item.unitSold);
        setHourlyData(hourly);
      } else {
        alert("Dish not found!");
      }
    }}
  >
    <svg width="99" height="32" viewBox="0 0 99 32" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect x="0.3" y="0.3" width="98.4" height="31.4" rx="3.7" fill="#B39793" stroke="#B39793" stroke-width="0.6"/>
<path d="M26.59 21.144C26.134 21.144 25.666 21.102 25.186 21.018C24.718 20.946 24.28 20.856 23.872 20.748C23.476 20.64 23.158 20.544 22.918 20.46V18.858L24.304 19.2C24.796 19.38 25.21 19.506 25.546 19.578C25.894 19.65 26.29 19.686 26.734 19.686C27.274 19.686 27.736 19.59 28.12 19.398C28.516 19.206 28.822 18.936 29.038 18.588C29.254 18.24 29.362 17.844 29.362 17.4C29.362 16.98 29.272 16.638 29.092 16.374C28.912 16.11 28.672 15.9 28.372 15.744C28.072 15.576 27.736 15.438 27.364 15.33C27.004 15.21 26.632 15.084 26.248 14.952C25.756 14.784 25.27 14.574 24.79 14.322C24.322 14.07 23.938 13.734 23.638 13.314C23.338 12.882 23.188 12.312 23.188 11.604C23.188 10.896 23.35 10.266 23.674 9.714C24.01 9.162 24.478 8.73 25.078 8.418C25.678 8.106 26.386 7.95 27.202 7.95C27.718 7.95 28.288 8.016 28.912 8.148C29.548 8.268 30.148 8.448 30.712 8.688V10.02L29.344 9.75C28.96 9.642 28.576 9.558 28.192 9.498C27.82 9.438 27.49 9.408 27.202 9.408C26.47 9.408 25.888 9.594 25.456 9.966C25.024 10.326 24.808 10.794 24.808 11.37C24.808 11.874 24.958 12.264 25.258 12.54C25.57 12.816 25.96 13.038 26.428 13.206C26.908 13.374 27.4 13.548 27.904 13.728C28.468 13.92 28.984 14.148 29.452 14.412C29.92 14.676 30.292 15.024 30.568 15.456C30.856 15.876 31 16.44 31 17.148C31 17.904 30.82 18.588 30.46 19.2C30.112 19.8 29.608 20.274 28.948 20.622C28.3 20.97 27.514 21.144 26.59 21.144ZM29.236 9.57L30.712 10.02V11.658H29.884C29.788 11.658 29.704 11.64 29.632 11.604C29.572 11.556 29.53 11.478 29.506 11.37L29.236 9.57ZM24.394 19.308L22.918 18.858V17.22H23.746C23.842 17.22 23.926 17.244 23.998 17.292C24.07 17.328 24.112 17.4 24.124 17.508L24.394 19.308ZM36.7766 21.126C35.9006 21.126 35.1326 20.928 34.4726 20.532C33.8246 20.136 33.3206 19.572 32.9606 18.84C32.6006 18.108 32.4206 17.244 32.4206 16.248C32.4206 15.396 32.5946 14.628 32.9426 13.944C33.2906 13.26 33.7826 12.72 34.4186 12.324C35.0666 11.928 35.8226 11.73 36.6866 11.73C37.4426 11.73 38.1026 11.898 38.6666 12.234C39.2306 12.57 39.6686 13.044 39.9806 13.656C40.3046 14.256 40.4666 14.976 40.4666 15.816C40.4666 16.068 40.4366 16.236 40.3766 16.32C40.3286 16.404 40.2266 16.446 40.0706 16.446H34.0046C34.0046 16.482 34.0046 16.524 34.0046 16.572C34.0046 16.608 34.0046 16.644 34.0046 16.68C34.0646 17.688 34.3466 18.474 34.8506 19.038C35.3546 19.59 36.0386 19.866 36.9026 19.866C37.2746 19.866 37.6406 19.794 38.0006 19.65C38.3726 19.494 38.6966 19.344 38.9726 19.2C39.2606 19.056 39.4646 18.984 39.5846 18.984C39.7166 18.984 39.8186 19.032 39.8906 19.128L40.3406 19.722C40.1006 20.034 39.7766 20.298 39.3686 20.514C38.9726 20.718 38.5466 20.874 38.0906 20.982C37.6346 21.078 37.1966 21.126 36.7766 21.126ZM34.0586 15.438H39.0266C39.0266 14.694 38.8226 14.088 38.4146 13.62C38.0066 13.152 37.4426 12.918 36.7226 12.918C35.9426 12.918 35.3306 13.14 34.8866 13.584C34.4426 14.028 34.1666 14.646 34.0586 15.438ZM44.2763 21.144C43.7963 21.144 43.3643 21.054 42.9803 20.874C42.5963 20.682 42.2903 20.406 42.0623 20.046C41.8343 19.686 41.7203 19.242 41.7203 18.714C41.7203 18.354 41.8163 18.012 42.0083 17.688C42.2123 17.352 42.5363 17.052 42.9803 16.788C43.4243 16.536 44.0003 16.326 44.7083 16.158C45.4283 15.99 46.3043 15.894 47.3363 15.87V15.168C47.3363 14.46 47.1803 13.926 46.8683 13.566C46.5683 13.194 46.1243 13.008 45.5363 13.008C45.2243 13.008 44.8943 13.092 44.5463 13.26C44.2103 13.416 43.8983 13.578 43.6103 13.746C43.3223 13.902 43.0943 13.98 42.9263 13.98C42.8183 13.98 42.7223 13.95 42.6383 13.89C42.5663 13.83 42.5063 13.758 42.4583 13.674L42.1703 13.17C42.6743 12.678 43.2143 12.312 43.7903 12.072C44.3783 11.832 45.0263 11.712 45.7343 11.712C46.4183 11.712 46.9943 11.856 47.4623 12.144C47.9303 12.432 48.2843 12.834 48.5243 13.35C48.7763 13.866 48.9023 14.472 48.9023 15.168V21H48.2003C48.0443 21 47.9183 20.976 47.8223 20.928C47.7263 20.88 47.6603 20.778 47.6243 20.622L47.4443 19.776C46.9643 20.208 46.4843 20.544 46.0043 20.784C45.5243 21.024 44.9483 21.144 44.2763 21.144ZM44.7443 20.01C45.2843 20.01 45.7583 19.902 46.1663 19.686C46.5743 19.47 46.9643 19.17 47.3363 18.786V16.896C46.7123 16.908 46.1483 16.956 45.6443 17.04C45.1403 17.112 44.7083 17.22 44.3483 17.364C44.0003 17.496 43.7303 17.67 43.5383 17.886C43.3583 18.09 43.2683 18.342 43.2683 18.642C43.2683 19.122 43.4063 19.47 43.6823 19.686C43.9703 19.902 44.3243 20.01 44.7443 20.01ZM48.3623 21L48.5603 19.596L49.9103 19.884C50.0063 19.896 50.0783 19.938 50.1263 20.01C50.1743 20.07 50.1983 20.154 50.1983 20.262V21H48.3623ZM52.2238 21V11.874H53.1418C53.3218 11.874 53.4478 11.91 53.5198 11.982C53.5918 12.042 53.6338 12.156 53.6458 12.324L53.7538 13.746C54.0658 13.11 54.4498 12.612 54.9058 12.252C55.3618 11.892 55.9018 11.712 56.5258 11.712C56.7778 11.712 57.0058 11.742 57.2098 11.802C57.4138 11.862 57.5998 11.94 57.7678 12.036L57.5698 13.242C57.5578 13.314 57.5218 13.368 57.4618 13.404C57.4138 13.44 57.3538 13.458 57.2818 13.458C57.1978 13.458 57.0358 13.434 56.7958 13.386C56.5558 13.326 56.3458 13.296 56.1658 13.296C55.6138 13.296 55.1458 13.458 54.7618 13.782C54.3898 14.106 54.0778 14.574 53.8258 15.186V21H52.2238ZM53.2858 21L53.4838 19.596L54.8338 19.884C54.9298 19.896 55.0018 19.938 55.0498 20.01C55.0978 20.07 55.1218 20.154 55.1218 20.262V21H53.2858ZM50.9278 21V20.262C50.9278 20.154 50.9518 20.07 50.9998 20.01C51.0478 19.938 51.1198 19.896 51.2158 19.884L52.5658 19.596L52.7638 21H50.9278ZM52.7638 11.874L52.5658 13.278L51.2158 12.99C51.1198 12.966 51.0478 12.924 50.9998 12.864C50.9518 12.804 50.9278 12.72 50.9278 12.612V11.874H52.7638ZM62.6616 21.126C61.8696 21.126 61.1676 20.934 60.5556 20.55C59.9556 20.154 59.4816 19.602 59.1336 18.894C58.7976 18.186 58.6296 17.364 58.6296 16.428C58.6296 15.516 58.7916 14.706 59.1156 13.998C59.4396 13.29 59.9196 12.738 60.5556 12.342C61.1916 11.934 61.9836 11.73 62.9316 11.73C63.3036 11.73 63.7356 11.796 64.2276 11.928C64.7196 12.048 65.1876 12.198 65.6316 12.378V13.35L64.6956 13.296C64.4556 13.212 64.1976 13.14 63.9216 13.08C63.6576 13.02 63.3576 12.99 63.0216 12.99C62.4096 12.99 61.8996 13.134 61.4916 13.422C61.0956 13.698 60.7956 14.094 60.5916 14.61C60.3876 15.126 60.2856 15.732 60.2856 16.428C60.2856 17.472 60.5136 18.312 60.9696 18.948C61.4256 19.572 62.0796 19.884 62.9316 19.884C63.3996 19.884 63.7836 19.812 64.0836 19.668C64.3836 19.512 64.6296 19.362 64.8216 19.218C65.0136 19.062 65.1636 18.984 65.2716 18.984C65.3316 18.984 65.3856 18.996 65.4336 19.02C65.4936 19.044 65.5416 19.08 65.5776 19.128L66.0276 19.722C65.6316 20.202 65.1396 20.556 64.5516 20.784C63.9636 21.012 63.3336 21.126 62.6616 21.126ZM64.4796 13.116L65.6316 13.35V14.754H65.0376C64.9176 14.754 64.8276 14.73 64.7676 14.682C64.7076 14.622 64.6716 14.55 64.6596 14.466L64.4796 13.116ZM68.3254 21V7.734H69.9274V13.098C70.3234 12.69 70.7554 12.36 71.2234 12.108C71.7034 11.856 72.2494 11.73 72.8614 11.73C73.5334 11.73 74.0914 11.874 74.5354 12.162C74.9914 12.45 75.3334 12.858 75.5614 13.386C75.8014 13.902 75.9214 14.502 75.9214 15.186V21H74.3194V15.186C74.3194 14.502 74.1574 13.968 73.8334 13.584C73.5214 13.2 73.0414 13.008 72.3934 13.008C71.9254 13.008 71.4814 13.122 71.0614 13.35C70.6534 13.578 70.2754 13.89 69.9274 14.286V21H68.3254ZM75.3814 21L75.5794 19.596L76.9294 19.884C77.0254 19.896 77.0974 19.938 77.1454 20.01C77.1934 20.07 77.2174 20.154 77.2174 20.262V21H75.3814ZM67.0294 21V20.262C67.0294 20.154 67.0534 20.07 67.1014 20.01C67.1494 19.938 67.2214 19.896 67.3174 19.884L68.6674 19.596L68.8654 21H67.0294ZM68.8654 7.734L68.6674 9.138L67.3174 8.85C67.2214 8.826 67.1494 8.784 67.1014 8.724C67.0534 8.664 67.0294 8.58 67.0294 8.472V7.734H68.8654ZM69.3874 21L69.5854 19.596L70.9354 19.884C71.0314 19.896 71.1034 19.938 71.1514 20.01C71.1994 20.07 71.2234 20.154 71.2234 20.262V21H69.3874Z" fill="#FCFDFD"/>
</svg>



  </div>
</div>



                {/* Right: Rest of the items */}
                <div className="flex items-center gap-4">
                    

                    

                    <svg width="105" height="34" viewBox="0 0 105 34" fill="none" xmlns="http://www.w3.org/2000/svg">
                <rect x="0.5" y="0.5" width="104" height="33" rx="4.5" fill="#FCFDFD" stroke="#B39793"/>
                <path d="M43.536 22.7578V11.3278H39.342V9.85181H49.44V11.3278H45.282V22.7578H43.536ZM42.24 22.7578V22.0198C42.24 21.9118 42.264 21.8278 42.312 21.7678C42.36 21.6958 42.432 21.6538 42.528 21.6418L43.878 21.3538L44.076 22.7578H42.24ZM44.742 22.7578L44.94 21.3538L46.29 21.6418C46.386 21.6538 46.458 21.6958 46.506 21.7678C46.554 21.8278 46.578 21.9118 46.578 22.0198V22.7578H44.742ZM47.964 10.8778L49.44 11.3278V12.9658H48.612C48.516 12.9658 48.432 12.9478 48.36 12.9118C48.3 12.8638 48.258 12.7858 48.234 12.6778L47.964 10.8778ZM40.818 10.8778L40.548 12.6778C40.536 12.7858 40.494 12.8638 40.422 12.9118C40.35 12.9478 40.266 12.9658 40.17 12.9658H39.342V11.3278L40.818 10.8778ZM54.1985 13.4878C55.1105 13.4878 55.8845 13.6858 56.5205 14.0818C57.1685 14.4658 57.6665 15.0118 58.0145 15.7198C58.3625 16.4278 58.5365 17.2498 58.5365 18.1858C58.5365 19.1218 58.3625 19.9438 58.0145 20.6518C57.6665 21.3598 57.1685 21.9118 56.5205 22.3078C55.8845 22.6918 55.1105 22.8838 54.1985 22.8838C53.3105 22.8838 52.5365 22.6918 51.8765 22.3078C51.2285 21.9118 50.7245 21.3598 50.3645 20.6518C50.0165 19.9438 49.8425 19.1218 49.8425 18.1858C49.8425 17.2498 50.0165 16.4278 50.3645 15.7198C50.7245 15.0118 51.2285 14.4658 51.8765 14.0818C52.5365 13.6858 53.3105 13.4878 54.1985 13.4878ZM54.1985 21.6238C55.0985 21.6238 55.7705 21.3238 56.2145 20.7238C56.6585 20.1238 56.8805 19.2838 56.8805 18.2038C56.8805 17.4718 56.7785 16.8538 56.5745 16.3498C56.3825 15.8338 56.0885 15.4378 55.6925 15.1618C55.2965 14.8858 54.7985 14.7478 54.1985 14.7478C53.5865 14.7478 53.0765 14.8918 52.6685 15.1798C52.2725 15.4558 51.9785 15.8518 51.7865 16.3678C51.5945 16.8838 51.4985 17.4958 51.4985 18.2038C51.4985 19.2478 51.7205 20.0818 52.1645 20.7058C52.6085 21.3178 53.2865 21.6238 54.1985 21.6238ZM63.2125 22.8838C62.4685 22.8838 61.8385 22.6918 61.3225 22.3078C60.8065 21.9238 60.4165 21.3838 60.1525 20.6878C59.8885 19.9798 59.7565 19.1578 59.7565 18.2218C59.7565 17.3338 59.9125 16.5358 60.2245 15.8278C60.5365 15.1078 60.9865 14.5378 61.5745 14.1178C62.1745 13.6858 62.8825 13.4698 63.6985 13.4698C64.2625 13.4698 64.7425 13.5658 65.1385 13.7578C65.5345 13.9498 65.8885 14.2138 66.2005 14.5498V9.49181H67.8025V22.7578H66.8485C66.6085 22.7578 66.4645 22.6438 66.4165 22.4158L66.2725 21.3178C65.8765 21.7858 65.4265 22.1638 64.9225 22.4518C64.4305 22.7398 63.8605 22.8838 63.2125 22.8838ZM63.7345 21.5878C64.2625 21.5878 64.7185 21.4678 65.1025 21.2278C65.4985 20.9878 65.8645 20.6458 66.2005 20.2018V15.7918C65.9005 15.3958 65.5765 15.1198 65.2285 14.9638C64.8805 14.8078 64.4905 14.7298 64.0585 14.7298C63.4945 14.7298 63.0145 14.8678 62.6185 15.1438C62.2225 15.4078 61.9225 15.8038 61.7185 16.3318C61.5145 16.8478 61.4125 17.4778 61.4125 18.2218C61.4125 19.3138 61.5985 20.1478 61.9705 20.7238C62.3425 21.2998 62.9305 21.5878 63.7345 21.5878ZM66.7405 9.49181L66.5425 10.8958L65.1925 10.6078C65.0965 10.5838 65.0245 10.5418 64.9765 10.4818C64.9285 10.4218 64.9045 10.3378 64.9045 10.2298V9.49181H66.7405ZM67.2625 22.7578L67.4605 21.3538L68.8105 21.6418C68.9065 21.6538 68.9785 21.6958 69.0265 21.7678C69.0745 21.8278 69.0985 21.9118 69.0985 22.0198V22.7578H67.2625ZM72.6317 22.9018C72.1517 22.9018 71.7197 22.8118 71.3357 22.6318C70.9517 22.4398 70.6457 22.1638 70.4177 21.8038C70.1897 21.4438 70.0757 20.9998 70.0757 20.4718C70.0757 20.1118 70.1717 19.7698 70.3637 19.4458C70.5677 19.1098 70.8917 18.8098 71.3357 18.5458C71.7797 18.2938 72.3557 18.0838 73.0637 17.9158C73.7837 17.7478 74.6597 17.6518 75.6917 17.6278V16.9258C75.6917 16.2178 75.5357 15.6838 75.2237 15.3238C74.9237 14.9518 74.4797 14.7658 73.8917 14.7658C73.5797 14.7658 73.2497 14.8498 72.9017 15.0178C72.5657 15.1738 72.2537 15.3358 71.9657 15.5038C71.6777 15.6598 71.4497 15.7378 71.2817 15.7378C71.1737 15.7378 71.0777 15.7078 70.9937 15.6478C70.9217 15.5878 70.8617 15.5158 70.8137 15.4318L70.5257 14.9278C71.0297 14.4358 71.5697 14.0698 72.1457 13.8298C72.7337 13.5898 73.3817 13.4698 74.0897 13.4698C74.7737 13.4698 75.3497 13.6138 75.8177 13.9018C76.2857 14.1898 76.6397 14.5918 76.8797 15.1078C77.1317 15.6238 77.2577 16.2298 77.2577 16.9258V22.7578H76.5557C76.3997 22.7578 76.2737 22.7338 76.1777 22.6858C76.0817 22.6378 76.0157 22.5358 75.9797 22.3798L75.7997 21.5338C75.3197 21.9658 74.8397 22.3018 74.3597 22.5418C73.8797 22.7818 73.3037 22.9018 72.6317 22.9018ZM73.0997 21.7678C73.6397 21.7678 74.1137 21.6598 74.5217 21.4438C74.9297 21.2278 75.3197 20.9278 75.6917 20.5438V18.6538C75.0677 18.6658 74.5037 18.7138 73.9997 18.7978C73.4957 18.8698 73.0637 18.9778 72.7037 19.1218C72.3557 19.2538 72.0857 19.4278 71.8937 19.6438C71.7137 19.8478 71.6237 20.0998 71.6237 20.3998C71.6237 20.8798 71.7617 21.2278 72.0377 21.4438C72.3257 21.6598 72.6797 21.7678 73.0997 21.7678ZM76.7177 22.7578L76.9157 21.3538L78.2657 21.6418C78.3617 21.6538 78.4337 21.6958 78.4817 21.7678C78.5297 21.8278 78.5537 21.9118 78.5537 22.0198V22.7578H76.7177ZM81.504 25.8538L83.16 22.2178L79.398 13.6318H80.784C80.928 13.6318 81.036 13.6678 81.108 13.7398C81.192 13.8118 81.252 13.8898 81.288 13.9738L83.718 19.7158C83.754 19.7998 83.796 19.9198 83.844 20.0758C83.892 20.2318 83.934 20.3758 83.97 20.5078C83.994 20.4118 84.018 20.3218 84.042 20.2378C84.066 20.1538 84.096 20.0698 84.132 19.9858C84.168 19.8898 84.204 19.7938 84.24 19.6978L86.598 13.9738C86.634 13.8778 86.694 13.7998 86.778 13.7398C86.874 13.6678 86.97 13.6318 87.066 13.6318H88.344L83.268 25.4578C83.22 25.5778 83.154 25.6738 83.07 25.7458C82.986 25.8178 82.86 25.8538 82.692 25.8538H81.504ZM80.55 14.0818V13.6318H81.9V14.0818H80.55ZM86.13 14.0818V13.6318H87.48V14.0818H86.13ZM80.658 13.6318L80.46 15.0358L79.11 14.7478C79.014 14.7238 78.942 14.6818 78.894 14.6218C78.846 14.5618 78.822 14.4778 78.822 14.3698V13.6318H80.658ZM82.908 13.6318V14.3698C82.908 14.4778 82.884 14.5618 82.836 14.6218C82.788 14.6818 82.716 14.7238 82.62 14.7478L81.27 15.0358L81.072 13.6318H82.908ZM86.67 13.6318L86.472 15.0358L85.122 14.7478C85.026 14.7238 84.954 14.6818 84.906 14.6218C84.858 14.5618 84.834 14.4778 84.834 14.3698V13.6318H86.67ZM88.92 13.6318V14.3698C88.92 14.4778 88.896 14.5618 88.848 14.6218C88.8 14.6818 88.728 14.7238 88.632 14.7478L87.282 15.0358L87.084 13.6318H88.92Z" fill="#B39793"/>
                <path d="M20.5918 8.25781C25.4809 8.25781 29.4101 12.0636 29.4102 16.7178C29.4102 21.3719 25.4809 25.1777 20.5918 25.1777C15.7027 25.1777 11.7734 21.3719 11.7734 16.7178C11.7735 12.0637 15.7028 8.25785 20.5918 8.25781ZM20.5918 9.0498C18.4883 9.04982 16.4668 9.85334 14.9736 11.2891C13.48 12.7254 12.6367 14.6778 12.6367 16.7178C12.6367 18.7578 13.48 20.7101 14.9736 22.1465C16.4668 23.5822 18.4883 24.3857 20.5918 24.3857C22.6953 24.3857 24.7168 23.5822 26.21 22.1465C27.7036 20.7101 28.5469 18.7578 28.5469 16.7178C28.5469 14.6777 27.7036 12.7254 26.21 11.2891C24.7168 9.85332 22.6953 9.0498 20.5918 9.0498ZM20.5918 11.8418C20.7031 11.8418 20.8074 11.8814 20.8857 11.9482C20.9635 12.0147 21.0093 12.1026 21.0205 12.1934L21.0234 12.25V16.5596L21.1768 16.707L23.6992 19.1318C23.7747 19.2047 23.8144 19.2991 23.8174 19.3936C23.8203 19.4878 23.7866 19.5829 23.7168 19.6592C23.6462 19.7362 23.5436 19.7883 23.4287 19.7988C23.3152 19.8092 23.2046 19.777 23.1182 19.7139L23.0684 19.6719L20.2793 16.9912C20.2153 16.9295 20.1772 16.8521 20.165 16.7725L20.1602 16.6973V12.2383C20.1602 12.1398 20.2005 12.0407 20.2793 11.9648C20.3589 11.8883 20.4711 11.8418 20.5918 11.8418Z" fill="#B39793" stroke="#B39793"/>
                </svg>


                    <div
                    className="cursor-pointer"
                    onClick={() => window.location.href = '/dashboard/sales-overview/trending-dishes/graph'}

                    >
                    <svg width="42" height="42" viewBox="0 0 42 42" fill="none" xmlns="http://www.w3.org/2000/svg">
                <circle cx="21" cy="21" r="20.5" fill="#F0EDE5" stroke="#B39793"/>
                <path d="M11.0312 11.5C11.1658 11.5 11.2992 11.5551 11.4004 11.6602C11.5022 11.766 11.5625 11.9138 11.5625 12.0713V29.3574H30.9688C31.1033 29.3574 31.2367 29.4124 31.3379 29.5176C31.4397 29.6234 31.5 29.7711 31.5 29.9287C31.5 30.0862 31.4397 30.234 31.3379 30.3398C31.2367 30.4449 31.1033 30.5 30.9688 30.5H11.0312C10.8967 30.5 10.7633 30.4449 10.6621 30.3398C10.5603 30.2341 10.5 30.0862 10.5 29.9287V12.0713C10.5 11.9138 10.5603 11.766 10.6621 11.6602C10.7379 11.5815 10.8319 11.5313 10.9307 11.5107L11.0312 11.5ZM30.9521 14.3838C31.0509 14.3856 31.149 14.4165 31.2334 14.4756L31.3125 14.5439C31.412 14.6473 31.472 14.7905 31.4746 14.9443C31.4772 15.0974 31.4215 15.2415 31.3262 15.3486L24.1182 22.8389C24.017 22.9437 23.8843 22.999 23.75 22.999C23.6155 22.999 23.4821 22.9439 23.3809 22.8389H23.3818L19.9854 19.3105L19.625 18.9365L19.2646 19.3105L15.5371 23.1836C15.4353 23.2823 15.3043 23.3333 15.1729 23.3311C15.0412 23.3287 14.9105 23.2727 14.8115 23.1699C14.7124 23.0666 14.6529 22.9231 14.6504 22.7695C14.6479 22.6164 14.7024 22.4714 14.7979 22.3643L19.2568 17.7324L19.2559 17.7314C19.357 17.6267 19.4907 17.5723 19.625 17.5723C19.7593 17.5723 19.892 17.6277 19.9932 17.7324L23.3896 21.2607L23.75 21.6357L24.1104 21.2607L30.5928 14.5254C30.6939 14.4298 30.8228 14.3815 30.9521 14.3838Z" fill="#4B3937" stroke="#4B3937"/>
                </svg>


                    </div>

                </div>
                </div>
                </div>




        <div className="bg-white rounded-b-xl p-8 shadow-md w-full pt-2 -mt-2">
      <ResponsiveContainer width="100%" height={400}>
        {hourlyData.length > 0 ? (
          <AreaChart
            data={hourlyData}
            margin={{ top: 30, right: 30, left: 10, bottom: 20 }}
          >
            <CartesianGrid strokeDasharray="2 3" vertical={false} />
            <XAxis
              dataKey="hour"
              label={{
                value: searchTerm,
                position: 'insideBottom',
                offset: -20,
                fill: '#4B3937',
                fontSize: 14,
                fontWeight: 500,
                fontFamily: 'Aleo, serif',
              }}
            />
            <YAxis
              label={{
                value: 'Units',
                angle: -90,
                position: 'insideLeft',
                fill: '#4B3937',
                fontSize: 14,
                fontWeight: 500,
                fontFamily: 'Aleo, serif',
              }}
            />
            <Tooltip />
            <Area
              type="monotone"
              dataKey="sold"
              stroke="#B39793"
              fill="#B39793"
              fillOpacity={0.4}
            />
          </AreaChart>
        ) : (
          <BarChart
            data={pieData}
            margin={{ top: 30, right: 30, left: 10, bottom: 20 }}
            barCategoryGap="10%"
          >
            <CartesianGrid strokeDasharray="2 3" vertical={false} />
            <XAxis
              dataKey="name"
              label={{
                value: 'Dishes',
                position: 'insideBottom',
                offset: -20,
                fill: '#4B3937',
                fontSize: 14,
                fontWeight: 500,
                fontFamily: 'Aleo, serif',
              }}
            />
            <YAxis
              label={{
                value: 'Units',
                angle: -90,
                position: 'insideLeft',
                fill: '#4B3937',
                fontSize: 14,
                fontWeight: 500,
                fontFamily: 'Aleo, serif',
              }}
            />
            <Tooltip />
            <Bar dataKey="unitSold" radius={[6, 6, 0, 0]}>
              {pieData.map((_, index) => {
                const alpha = Math.max(1 - index * 0.1, 0.1);
                return (
                  <Cell
                    key={`cell-${index}`}
                    fill={`rgba(${baseRGB}, ${alpha.toFixed(2)})`}
                  />
                );
              })}
              <LabelList
                dataKey="unitSold"
                position="top"
                fill="#4B3937"
                fontSize={14}
              />
            </Bar>
          </BarChart>
        )}
      </ResponsiveContainer>



      {/* <div className="flex justify-center gap-8 mt-4 text-sm font-medium">
        <div className="flex items-center gap-2">
          <span className="w-3 h-3 rounded-full" style={{ backgroundColor: '#B39793' }}></span>
          <span>Dishes</span>
        </div>
      </div> */}
    </div>

        </div>
      </div>
    </div>
  );
}
