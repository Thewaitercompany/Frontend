"use client";
import React, { useState, useEffect } from "react";

import { useOrders } from "@/hooks/useOrders";
import Calendar from "react-calendar";
import "react-calendar/dist/Calendar.css";
import CustomCalendar from "@/components/CustomCalendar";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faBell } from "@fortawesome/free-solid-svg-icons";
import "@fortawesome/fontawesome-free/css/all.min.css";
import { useRouter } from "next/navigation";

import {
  AreaChart,
  Area,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
} from "recharts";
import Link from "next/link";
import Image from "next/image";

// Bell icon from Nitanshu fix
const BellIcon: React.FC<{ unreadCount?: number }> = ({ unreadCount = 0 }) => (
  <svg
    width={36}
    height={33}
    viewBox="0 0 36 33"
    fill="none"
    style={{ position: "relative", display: "block" }}
  >
    <ellipse cx="18" cy="5" rx="5.5" ry="3.2" fill="#3A2102" />
    <path
      d="M28 18V13C28 8.477 23.523 4 18 4C12.477 4 8 8.477 8 13V18L5 23V24.5H31V23L28 18Z"
      stroke="#3A2102"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
      fill="#3A2102"
    />
    <circle cx="18" cy="29" r="2.7" fill="#3A2102" />
    {unreadCount > 0 && (
      <g>
        <circle
          cx="30.5"
          cy="7.5"
          r="7"
          fill="#d82c2c"
          stroke="#fff"
          strokeWidth="2"
        />
        <text
          x="30.5"
          y="7.5"
          textAnchor="middle"
          alignmentBaseline="middle"
          dominantBaseline="middle"
          fontWeight="bold"
          fontSize="12"
          fill="#fff"
          style={{ fontVariantNumeric: "tabular-nums" }}
        >
          {unreadCount}
        </text>
      </g>
    )}
  </svg>
);

// Monthly revenue data
const monthlyData = {
  October: [
    { name: "1", Expense: 1000 },
    { name: "2", Expense: 800 },
    { name: "3", Expense: 700 },
    { name: "4", Expense: 1000 },
    { name: "5", Expense: 900 },
    { name: "6", Expense: 850 },
    { name: "7", Expense: 1050 },
    { name: "8", Expense: 800 },
    { name: "9", Expense: 900 },
    { name: "10", Expense: 850 },
    { name: "11", Expense: 950 },
    { name: "12", Expense: 950 }, // Total: 12000
  ]
};

const expenseData = [
  { day: "Mon", Expense: 500 },
  { day: "Tue", Expense: 3500 },
  { day: "Wed", Expense: 1500 },
  { day: "Thu", Expense: 2500 },
  { day: "Fri", Expense: 2000 },
  { day: "Sat", Expense: 1500 },
  { day: "Sun", Expense: 500 },
];


const backgroundColor = "#F5EFE3";

export default function Graph() {
  const [currentTime, setCurrentTime] = useState<Date>(new Date());
  const [showNotifications, setShowNotifications] = useState(false);
  const [unreadNotificationsCount, setUnreadNotificationsCount] = useState(3);

  const router = useRouter();

  const { totalOrderCount, pendingOrderCount } = useOrders();

  useEffect(() => {
    const timer = setInterval(() => setCurrentTime(new Date()), 1000);
    return () => clearInterval(timer);
  }, []);

  const handleUnreadCount = (count: number) =>
    setUnreadNotificationsCount(count);

  function formatDateTime(date: Date): string {
    const days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
    const months = [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec",
    ];
    let h = date.getHours();
    const m = date.getMinutes();
    let ampm = "AM";
    if (h >= 12) {
      ampm = "PM";
      if (h > 12) h -= 12;
    }
    if (h === 0) h = 12;
    return (
      days[date.getDay()] +
      " " +
      ("0" + date.getDate()).slice(-2) +
      " " +
      months[date.getMonth()] +
      " " +
      ("0" + h).slice(-2) +
      ":" +
      ("0" + m).slice(-2) +
      ampm
    );
  }

  return (
    <div
      style={{
        minHeight: "100vh",
        background: backgroundColor,
        fontFamily: "Aleo",
        position: "relative",
        overflow: "hidden",
      }}
    >
      {/* Main Dashboard Content */}
      <div className="flex justify-between items-center ml-[100px] mt-[28px]">

            <div className="flex items-center gap-2 text-[#4b2e2e]">
              <button
                onClick={() => router.push("/dashboard/sales-overview/expense-purchase")}
                className="w-[25px] h-[25px]"
                title="Back to Dashboard"
              >
                <svg
                  width="25"
                  height="25"
                  viewBox="0 0 25 25"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <rect width="25" height="25" fill="#F1EEE6" />
                  <path
                    d="M17.2783 23.75C17.0882 23.75 16.8994 23.7101 16.7227 23.6318C16.5457 23.5534 16.3833 23.4378 16.2461 23.291L7.68848 14.1318V14.1309C7.55062 13.9845 7.43978 13.8093 7.36426 13.6152C7.28884 13.4214 7.25005 13.2128 7.25 13.002C7.25 12.7909 7.28875 12.5817 7.36426 12.3877C7.42088 12.2422 7.49717 12.1073 7.58984 11.9873L7.68848 11.8721L16.2461 2.71289L16.2471 2.71191C16.3838 2.56437 16.5457 2.44803 16.7227 2.36914C16.8993 2.29042 17.0881 2.25004 17.2783 2.25C17.4688 2.25 17.6581 2.29029 17.835 2.36914C18.0119 2.44803 18.1738 2.56436 18.3105 2.71191L18.3115 2.71289L18.4102 2.82812C18.5028 2.94817 18.5791 3.08303 18.6357 3.22852C18.7113 3.42255 18.75 3.63167 18.75 3.84277C18.75 4.05366 18.7112 4.2622 18.6357 4.45605C18.5791 4.60147 18.5028 4.73645 18.4102 4.85645L18.3115 4.97168L10.9521 12.8311L10.792 13.002L10.9521 13.1729L18.3115 21.0312H18.3125C18.5894 21.3281 18.7471 21.7348 18.7471 22.1611C18.747 22.372 18.7079 22.5805 18.6328 22.7744C18.5577 22.9684 18.4487 23.1442 18.3115 23.291C18.0346 23.5874 17.6621 23.75 17.2783 23.75Z"
                    fill="#4A3936"
                    stroke="#EFECE4"
                    strokeWidth="0.5"
                  />
                </svg>
              </button>

              <h2 className="text-xl font-medium font-black">Total Expenses</h2>
            </div>
            
          </div>
      <div className="min-h-screen bg-[#F4F0E8] px-12 ml-14">
        
        {/* Top Section - Overview + Trending */}

        {/* Bottom Section - Revenue Chart Full Width */}
        <div className="mt-4">
        <div className="w-full bg-white shadow-xl rounded-t-xl p-6 flex justify-end items-center gap-4">

  <svg
    width="83"
    height="30"
    viewBox="0 0 83 30"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    
<rect x="0.5" y="0.5" width="82" height="29" rx="3.5" fill="#FCFDFD" stroke="#B39793"/>
<path d="M33.528 19V10.11H30.266V8.962H38.12V10.11H34.886V19H33.528ZM32.52 19V18.426C32.52 18.342 32.5387 18.2767 32.576 18.23C32.6133 18.174 32.6693 18.1413 32.744 18.132L33.794 17.908L33.948 19H32.52ZM34.466 19L34.62 17.908L35.67 18.132C35.7447 18.1413 35.8007 18.174 35.838 18.23C35.8753 18.2767 35.894 18.342 35.894 18.426V19H34.466ZM36.972 9.76L38.12 10.11V11.384H37.476C37.4013 11.384 37.336 11.37 37.28 11.342C37.2333 11.3047 37.2007 11.244 37.182 11.16L36.972 9.76ZM31.414 9.76L31.204 11.16C31.1947 11.244 31.162 11.3047 31.106 11.342C31.05 11.37 30.9847 11.384 30.91 11.384H30.266V10.11L31.414 9.76ZM41.821 11.79C42.5304 11.79 43.1324 11.944 43.627 12.252C44.131 12.5507 44.5184 12.9753 44.789 13.526C45.0597 14.0767 45.195 14.716 45.195 15.444C45.195 16.172 45.0597 16.8113 44.789 17.362C44.5184 17.9127 44.131 18.342 43.627 18.65C43.1324 18.9487 42.5304 19.098 41.821 19.098C41.1304 19.098 40.5284 18.9487 40.015 18.65C39.511 18.342 39.119 17.9127 38.839 17.362C38.5684 16.8113 38.433 16.172 38.433 15.444C38.433 14.716 38.5684 14.0767 38.839 13.526C39.119 12.9753 39.511 12.5507 40.015 12.252C40.5284 11.944 41.1304 11.79 41.821 11.79ZM41.821 18.118C42.521 18.118 43.0437 17.8847 43.389 17.418C43.7344 16.9513 43.907 16.298 43.907 15.458C43.907 14.8887 43.8277 14.408 43.669 14.016C43.5197 13.6147 43.291 13.3067 42.983 13.092C42.675 12.8773 42.2877 12.77 41.821 12.77C41.345 12.77 40.9484 12.882 40.631 13.106C40.323 13.3207 40.0944 13.6287 39.945 14.03C39.7957 14.4313 39.721 14.9073 39.721 15.458C39.721 16.27 39.8937 16.9187 40.239 17.404C40.5844 17.88 41.1117 18.118 41.821 18.118ZM48.832 19.098C48.2533 19.098 47.7633 18.9487 47.362 18.65C46.9606 18.3513 46.6573 17.9313 46.452 17.39C46.2466 16.8393 46.144 16.2 46.144 15.472C46.144 14.7813 46.2653 14.1607 46.508 13.61C46.7506 13.05 47.1006 12.6067 47.558 12.28C48.0246 11.944 48.5753 11.776 49.21 11.776C49.6486 11.776 50.022 11.8507 50.33 12C50.638 12.1493 50.9133 12.3547 51.156 12.616V8.682H52.402V19H51.66C51.4733 19 51.3613 18.9113 51.324 18.734L51.212 17.88C50.904 18.244 50.554 18.538 50.162 18.762C49.7793 18.986 49.336 19.098 48.832 19.098ZM49.238 18.09C49.6486 18.09 50.0033 17.9967 50.302 17.81C50.61 17.6233 50.8946 17.3573 51.156 17.012V13.582C50.9226 13.274 50.6706 13.0593 50.4 12.938C50.1293 12.8167 49.826 12.756 49.49 12.756C49.0513 12.756 48.678 12.8633 48.37 13.078C48.062 13.2833 47.8286 13.5913 47.67 14.002C47.5113 14.4033 47.432 14.8933 47.432 15.472C47.432 16.3213 47.5766 16.97 47.866 17.418C48.1553 17.866 48.6126 18.09 49.238 18.09ZM51.576 8.682L51.422 9.774L50.372 9.55C50.2973 9.53133 50.2413 9.49867 50.204 9.452C50.1666 9.40533 50.148 9.34 50.148 9.256V8.682H51.576ZM51.982 19L52.136 17.908L53.186 18.132C53.2606 18.1413 53.3166 18.174 53.354 18.23C53.3913 18.2767 53.41 18.342 53.41 18.426V19H51.982ZM56.158 19.112C55.7847 19.112 55.4487 19.042 55.15 18.902C54.8513 18.7527 54.6133 18.538 54.436 18.258C54.2587 17.978 54.17 17.6327 54.17 17.222C54.17 16.942 54.2447 16.676 54.394 16.424C54.5527 16.1627 54.8047 15.9293 55.15 15.724C55.4953 15.528 55.9433 15.3647 56.494 15.234C57.054 15.1033 57.7353 15.0287 58.538 15.01V14.464C58.538 13.9133 58.4167 13.498 58.174 13.218C57.9407 12.9287 57.5953 12.784 57.138 12.784C56.8953 12.784 56.6387 12.8493 56.368 12.98C56.1067 13.1013 55.864 13.2273 55.64 13.358C55.416 13.4793 55.2387 13.54 55.108 13.54C55.024 13.54 54.9493 13.5167 54.884 13.47C54.828 13.4233 54.7813 13.3673 54.744 13.302L54.52 12.91C54.912 12.5273 55.332 12.2427 55.78 12.056C56.2373 11.8693 56.7413 11.776 57.292 11.776C57.824 11.776 58.272 11.888 58.636 12.112C59 12.336 59.2753 12.6487 59.462 13.05C59.658 13.4513 59.756 13.9227 59.756 14.464V19H59.21C59.0887 19 58.9907 18.9813 58.916 18.944C58.8413 18.9067 58.79 18.8273 58.762 18.706L58.622 18.048C58.2487 18.384 57.8753 18.6453 57.502 18.832C57.1287 19.0187 56.6807 19.112 56.158 19.112ZM56.522 18.23C56.942 18.23 57.3107 18.146 57.628 17.978C57.9453 17.81 58.2487 17.5767 58.538 17.278V15.808C58.0527 15.8173 57.614 15.8547 57.222 15.92C56.83 15.976 56.494 16.06 56.214 16.172C55.9433 16.2747 55.7333 16.41 55.584 16.578C55.444 16.7367 55.374 16.9327 55.374 17.166C55.374 17.5393 55.4813 17.81 55.696 17.978C55.92 18.146 56.1953 18.23 56.522 18.23ZM59.336 19L59.49 17.908L60.54 18.132C60.6147 18.1413 60.6707 18.174 60.708 18.23C60.7453 18.2767 60.764 18.342 60.764 18.426V19H59.336ZM63.0587 21.408L64.3467 18.58L61.4207 11.902H62.4987C62.6107 11.902 62.6947 11.93 62.7507 11.986C62.816 12.042 62.8627 12.1027 62.8907 12.168L64.7807 16.634C64.8087 16.6993 64.8414 16.7927 64.8787 16.914C64.916 17.0353 64.9487 17.1473 64.9767 17.25C64.9954 17.1753 65.014 17.1053 65.0327 17.04C65.0514 16.9747 65.0747 16.9093 65.1027 16.844C65.1307 16.7693 65.1587 16.6947 65.1867 16.62L67.0207 12.168C67.0487 12.0933 67.0954 12.0327 67.1607 11.986C67.2354 11.93 67.31 11.902 67.3847 11.902H68.3787L64.4307 21.1C64.3934 21.1933 64.342 21.268 64.2767 21.324C64.2114 21.38 64.1134 21.408 63.9827 21.408H63.0587ZM62.3167 12.252V11.902H63.3667V12.252H62.3167ZM66.6567 12.252V11.902H67.7067V12.252H66.6567ZM62.4007 11.902L62.2467 12.994L61.1967 12.77C61.122 12.7513 61.066 12.7187 61.0287 12.672C60.9914 12.6253 60.9727 12.56 60.9727 12.476V11.902H62.4007ZM64.1507 11.902V12.476C64.1507 12.56 64.132 12.6253 64.0947 12.672C64.0574 12.7187 64.0014 12.7513 63.9267 12.77L62.8767 12.994L62.7227 11.902H64.1507ZM67.0767 11.902L66.9227 12.994L65.8727 12.77C65.798 12.7513 65.742 12.7187 65.7047 12.672C65.6674 12.6253 65.6487 12.56 65.6487 12.476V11.902H67.0767ZM68.8267 11.902V12.476C68.8267 12.56 68.808 12.6253 68.7707 12.672C68.7334 12.7187 68.6774 12.7513 68.6027 12.77L67.5527 12.994L67.3987 11.902H68.8267Z" fill="#B39793"/>
<path d="M15 8.5C18.59 8.5 21.5 11.41 21.5 15C21.5 18.59 18.59 21.5 15 21.5C11.41 21.5 8.5 18.59 8.5 15C8.5 11.41 11.41 8.5 15 8.5ZM15 8.90039C13.3822 8.90039 11.8305 9.54255 10.6865 10.6865C9.54255 11.8305 8.90039 13.3822 8.90039 15C8.90039 16.6178 9.54255 18.1695 10.6865 19.3135C11.8305 20.4574 13.3822 21.0996 15 21.0996C16.6178 21.0996 18.1695 20.4574 19.3135 19.3135C20.4574 18.1695 21.0996 16.6178 21.0996 15C21.0996 13.3822 20.4574 11.8305 19.3135 10.6865C18.1695 9.54255 16.6178 8.90039 15 8.90039ZM15 11.2998C15.049 11.2998 15.0962 11.318 15.1328 11.3506C15.1694 11.3831 15.1925 11.4279 15.1982 11.4766L15.2002 11.5137V14.917L15.3467 15.0635L17.2412 16.958C17.2769 16.9939 17.2972 17.0422 17.2988 17.0928C17.3004 17.1436 17.2826 17.1933 17.249 17.2314C17.2155 17.2695 17.1687 17.293 17.1182 17.2979C17.0693 17.3025 17.0209 17.2887 16.9814 17.2598L16.9453 17.2275L14.8584 15.1416C14.8281 15.1112 14.809 15.0717 14.8027 15.0293L14.7998 14.9805V11.5C14.7998 11.447 14.8209 11.3959 14.8584 11.3584C14.8866 11.3302 14.9224 11.3114 14.9609 11.3037L15 11.2998Z" fill="#B39793" stroke="#B39793"/>
  </svg>

  <svg width="42" height="42" viewBox="0 0 42 42" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="21" cy="21" r="20.5" fill="#F0EDE5" stroke="#B39793"/>
<path d="M11.0312 11.5C11.1658 11.5 11.2992 11.5551 11.4004 11.6602C11.5022 11.766 11.5625 11.9138 11.5625 12.0713V29.3574H30.9688C31.1033 29.3574 31.2367 29.4124 31.3379 29.5176C31.4397 29.6234 31.5 29.7711 31.5 29.9287C31.5 30.0862 31.4397 30.234 31.3379 30.3398C31.2367 30.4449 31.1033 30.5 30.9688 30.5H11.0312C10.8967 30.5 10.7633 30.4449 10.6621 30.3398C10.5603 30.2341 10.5 30.0862 10.5 29.9287V12.0713C10.5 11.9138 10.5603 11.766 10.6621 11.6602C10.7379 11.5815 10.8319 11.5313 10.9307 11.5107L11.0312 11.5ZM30.9521 14.3838C31.0509 14.3856 31.149 14.4165 31.2334 14.4756L31.3125 14.5439C31.412 14.6473 31.472 14.7905 31.4746 14.9443C31.4772 15.0974 31.4215 15.2415 31.3262 15.3486L24.1182 22.8389C24.017 22.9437 23.8843 22.999 23.75 22.999C23.6155 22.999 23.4821 22.9439 23.3809 22.8389H23.3818L19.9854 19.3105L19.625 18.9365L19.2646 19.3105L15.5371 23.1836C15.4353 23.2823 15.3043 23.3333 15.1729 23.3311C15.0412 23.3287 14.9105 23.2727 14.8115 23.1699C14.7124 23.0666 14.6529 22.9231 14.6504 22.7695C14.6479 22.6164 14.7024 22.4714 14.7979 22.3643L19.2568 17.7324L19.2559 17.7314C19.357 17.6267 19.4907 17.5723 19.625 17.5723C19.7593 17.5723 19.892 17.6277 19.9932 17.7324L23.3896 21.2607L23.75 21.6357L24.1104 21.2607L30.5928 14.5254C30.6939 14.4298 30.8228 14.3815 30.9521 14.3838Z" fill="#4B3937" stroke="#4B3937"/>
</svg>

</div>

        <div className="bg-white rounded-b-xl p-8 shadow-md w-full pt-0">

  {/* Heading for Total Revenue */}
  <div className="mb-12">
  <h2 className="text-[20px] font-normal text-[#4B2E2E] font-[Aleo]">
    Total Expenses: ₹12000
  </h2>
</div>

  <ResponsiveContainer width="100%" height={400}>
  <AreaChart data={expenseData}>
    <CartesianGrid vertical={false} stroke="#f0f0f0" />
    <XAxis dataKey="day" axisLine={false} tickLine={false} />
    <YAxis
  axisLine={false}
  tickLine={false}
  tickFormatter={(value) => `${value / 1000}k`}
  ticks={[0, 4000, 8000, 12000, 16000]}
/>

    <Tooltip formatter={(value) => `₹${value}`} />
    <Area
      type="monotone"
      dataKey="Expense"
      stroke="none"
      fill="#B196FF"
    />
  </AreaChart>
</ResponsiveContainer>



  <div className="flex justify-center gap-8 mt-4 text-sm font-medium">
    <div className="flex items-center gap-2">
      <span className="w-3 h-3 rounded-full bg-[#B196FF]"></span>
      <span>Expense</span>
    </div>
  </div>
</div>
        </div>
      </div>
    </div>
  );
}
